/** Apply Mask
*
* Copyright 2020 Joseph Sherwood, Peter Vennemann
* 
* This file is part of JPIV.
*
* JPIV is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.										
*
* JPIV is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with JPIV.  If not, see <http://www.gnu.org/licenses/>. 
*/
					
jpiv2.ScriptDlg myDlg = new jpiv2.ScriptDlg(jpiv,
	"Apply Mask",
	"joseph.sherwood@kcl.ac.uk, vennemann@fh-muenster.de");

// Use the set...() methods of the jpiv2.ScriptDlg class to add some information that 
// will be displayed in the dialog. (Use '+' to concatenate strings.)
myDlg.setDate("April 2020");
myDlg.setOs("independent");
myDlg.setDependencies("Matlab or Octave");
myDlg.setComment(
	"Applies a mask to the vector field to remove unwanted vectors. " +
	"Define 8 bit mask as e.g. 'mask.tif' using e.g. ImageJ."); 

// Add your specific variable names, default values and descriptions.
// The values of these variables can later be manipulated in the dialog.
myDlg.addVariable("interpreter", "octave", "'octave' or 'matlab'");

void showDialog() {
	// The method 'display' will make the dialog visible.
	int proceed = myDlg.display();
	
	if (proceed == myDlg.EXECUTE_OPTION) {
		
		String interpreter = myDlg.getAsString("interpreter");
		String sourcePath = jpiv.getListFrame().getSelectedElement();
		
		// In case the user did not select anything.
		if(sourcePath == null) {
			System.out.println("Please select a vector file first.");
			return;
		}
		
		String maskname;
		System.out.println("Specify mask image, please.");
		jpiv2.FlexFileChooser myFileChooser = jpiv.getFlexFileChooser();
		myFileChooser.setFiletype(myFileChooser.TIF, false);
		int approve = myFileChooser.showOpenDialog(jpiv);
		if (approve == javax.swing.JFileChooser.APPROVE_OPTION) {
			maskname = myFileChooser.getSelectedFile().toString();
		} else {
			System.out.println("No mask image specified.");
			return;
		}		
		
		String destPath;
		System.out.println("Specify output filename, please.");
		jpiv2.FlexFileChooser myFileChooser = jpiv.getFlexFileChooser();
		myFileChooser.setFiletype(myFileChooser.JVC, false);
		int approve = myFileChooser.showSaveDialog(jpiv);
		if (approve == javax.swing.JFileChooser.APPROVE_OPTION) {
			destPath = myFileChooser.getSelectedFile().toString();
		} else {
			System.out.println("No destination file specified.");
			return;
		}
		// fix the file extension
		if (destPath.lastIndexOf('.') != -1) {
			destPath = destPath.substring(0, destPath.lastIndexOf('.'));
		}
		destPath += ".jvc";
		// Assemble the directory name of the matlab files. 
		String fileSep = jpiv2.FileHandling.getFileSeparator();
		String myMDir = jpiv.getSettings().jpivLibPath + fileSep +
					"matlab" + fileSep;
		
		// Create a reference to the running command interpreter.
		jpiv2.CmdInterpreter ci = jpiv.getCmdInterpreter();
		
		// Create the command line.
		String[] cmd = {""};
		if (interpreter == "matlab") {
		    cmd[0] = interpreter + " -nosplash -nodisplay -r \"" +
			      "addpath('" + myMDir + "');" +
			      "mask( " +
			      "'" + sourcePath + "', " +
			      "'" + destPath + "', " +
			      "'" + maskname + "');exit;\"";
		}
		else if (interpreter == "octave") {
		    cmd[0] = interpreter + " --no-gui" +
			   " --path '" + myMDir + "'" +
			   " --eval \"mask(" +
			   "'" + sourcePath + "', " +
			   "'" + destPath + "', " +
			   "'" + maskname + "');exit;\"";
		}
				
		// Execute the shell command.
		System.out.println(cmd[0]);
		ci.execute(cmd, ci.TYPE_SHELLCOMMAND);
		
		// Finally, add a link to the destination file to filelist.
		jpiv.getListFrame().appendElement(destPath);
		
		System.out.println("finished");
		return;
	
	// The user pressed 'quit'.
	} else {
		System.out.println("cancelled");
		return;
	}
}

// execute the method definition above
showDialog();

// free memory
jpiv.getCmdInterpreter().clearBshNamespace();

