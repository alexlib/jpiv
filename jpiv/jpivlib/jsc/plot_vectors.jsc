/** Plot vectors using Python.
*
* Copyright 2020 Peter Vennemann
* 
* This file is part of JPIV.
*
* JPIV is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* JPIV is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with JPIV.  If not, see <http://www.gnu.org/licenses/>. 
*
* This script calls a Python function for plotting vectors.
*/


PythonPlot() {
    
    String sourcePath = jpiv.getListFrame().getSelectedElement();
    if(sourcePath == null) {
	System.out.println("Please select a vector file first.");
	return(null);
    }

    private void run() {
	jpiv2.ScriptDlg myDlg = new jpiv2.ScriptDlg(
	    jpiv,
	    "Plot Vectors",
	    "vennemann@fh-muenster.de");
	myDlg.setDate("April 2020");
	myDlg.setOs("independent");
	myDlg.setDependencies("Python3");
	myDlg.setComment("Plot velocities as vectors.");
	myDlg.addVariable("invert_yaxis", "True",
			  "Set origin to upper left corner, if 'True'.");

	// Display dialog:
	int proceed = myDlg.display();
	if (proceed == myDlg.EXECUTE_OPTION) {
            // Reference to the running command interpreter:
	    jpiv2.CmdInterpreter ci = jpiv.getCmdInterpreter();
            // Path to Python scripts:
	    String fileSep = jpiv2.FileHandling.getFileSeparator();
	    String myPyDir = jpiv.getSettings().jpivLibPath +
	        fileSep + "python" + fileSep;
	    // Create command:
	    String[] cmd = {
                "python3 " + myPyDir + "vec_plot.py" +
		" --fname " + "'" + sourcePath + "'" +
		" --invert_yaxis " + myDlg.getAsString("invert_yaxis") +
		" --plot_type vector"};
	    // Execute command:
	    System.out.println(cmd[0]);
	    ci.execute(cmd, ci.TYPE_SHELLCOMMAND);
	} else {
	    System.out.println("cancelled");
	    return(null);
	}
    }
    return(this);
}

// plot in background
pythonPlot = PythonPlot();
new Thread(pythonPlot).start();
// clean up
jpiv.getCmdInterpreter().clearBshNamespace();
