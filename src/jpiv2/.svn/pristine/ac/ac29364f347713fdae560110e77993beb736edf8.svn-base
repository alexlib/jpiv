/*
 * ListFrame.java
 *
 * Copyright 2008 Peter Vennemann
 * 
 * This file is part of JPIV.
 *
 * JPIV is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JPIV is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JPIV.  If not, see <http://www.gnu.org/licenses/>. 
 */

package jpiv2;

import java.awt.Cursor;

/**
 * Internal Frame holding a list of filenames.
 * 
 */
public class ListFrame extends javax.swing.JInternalFrame {

	/**
	 * Constructor.
	 * 
	 * @param jpiv
	 *            The parent component.
	 */
	public ListFrame(jpiv2.JPiv jpiv) {
		initComponents();
		jList.setCellRenderer(new jpiv2.EnumerationListCellRenderer());
		this.jpiv = jpiv;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc=" Generated Code ">//GEN-BEGIN:initComponents
	private void initComponents() {
		jPopupMenu = new javax.swing.JPopupMenu();
		jMenuItemDisplay = new javax.swing.JMenuItem();
		jSeparator1 = new javax.swing.JSeparator();
		jMenuItemRemove = new javax.swing.JMenuItem();
		jMenuItemRemoveAll = new javax.swing.JMenuItem();
		jSeparator2 = new javax.swing.JSeparator();
		jMenuItemDelete = new javax.swing.JMenuItem();
		jScrollPane = new javax.swing.JScrollPane();
		listModel = new javax.swing.DefaultListModel();
		listModel.ensureCapacity(10000);
		jList = new javax.swing.JList(listModel);

		jMenuItemDisplay.setText("display");
		jMenuItemDisplay.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItemDisplayActionPerformed(evt);
			}
		});

		jPopupMenu.add(jMenuItemDisplay);

		jPopupMenu.add(jSeparator1);

		jMenuItemRemove.setText("remove selection");
		jMenuItemRemove.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItemRemoveActionPerformed(evt);
			}
		});

		jPopupMenu.add(jMenuItemRemove);

		jMenuItemRemoveAll.setText("remove all");
		jMenuItemRemoveAll
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						jMenuItemRemoveAllActionPerformed(evt);
					}
				});

		jPopupMenu.add(jMenuItemRemoveAll);

		jPopupMenu.add(jSeparator2);

		jMenuItemDelete.setText("delete selection");
		jMenuItemDelete.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItemDeleteActionPerformed(evt);
			}
		});

		jPopupMenu.add(jMenuItemDelete);

		setMaximizable(true);
		setResizable(true);
		setTitle("Files");
		jList.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jListMouseClicked(evt);
				jListMousePopupTrigger(evt);
			}

			public void mousePressed(java.awt.event.MouseEvent evt) {
				jListMousePopupTrigger(evt);
			}

			public void mouseReleased(java.awt.event.MouseEvent evt) {
				jListMousePopupTrigger(evt);
			}
		});

		jScrollPane.setViewportView(jList);

		getContentPane().add(jScrollPane, java.awt.BorderLayout.CENTER);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void jListMousePopupTrigger(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jListMousePopupTrigger
		if (evt.isPopupTrigger()) {
			jPopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
		}
	}// GEN-LAST:event_jListMousePopupTrigger

	private void jMenuItemDeleteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemDeleteActionPerformed
		deleteSelectedElements();
	}// GEN-LAST:event_jMenuItemDeleteActionPerformed

	private void jMenuItemRemoveAllActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemRemoveAllActionPerformed
		clearList();
	}// GEN-LAST:event_jMenuItemRemoveAllActionPerformed

	private void jMenuItemRemoveActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemRemoveActionPerformed
		removeSelectedElements();
	}// GEN-LAST:event_jMenuItemRemoveActionPerformed

	private void jMenuItemDisplayActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemDisplayActionPerformed
		this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
		display(getSelectedElement());
	}// GEN-LAST:event_jMenuItemDisplayActionPerformed

	private void jListMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jListMouseClicked
		if (evt.getClickCount() == 2 && !listModel.isEmpty()) {
			this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
			display(getSelectedElement());
		}
	}// GEN-LAST:event_jListMouseClicked

	/**
	 * Appends an array of strings at the end of the list.
	 * 
	 * @param string
	 *            An array of absolute pathnames.
	 */
	public void appendElements(String[] string) {
		for (int i = 0; i < string.length; ++i) {
			listModel.addElement(string[i]);
		}
	}

	/**
	 * Appends a single string at the end of the list.
	 * 
	 * @param string
	 *            A single absolute Pathname.
	 */
	public void appendElement(String string) {
		listModel.addElement(string);
	}

	/** Clears the list. */
	public void clearList() {
		listModel.clear();
	}

	/** Removes the selected entries from the list. */
	public void removeSelectedElements() {
		int[] indices = jList.getSelectedIndices();
		for (int i = indices.length - 1; i >= 0; --i) {
			listModel.removeElementAt(indices[i]);
		}
	}

	/** Deletes the selected files from the hard disk */
	public void deleteSelectedElements() {
		int[] indices = jList.getSelectedIndices();
		int option = javax.swing.JOptionPane.showInternalConfirmDialog(this,
				"Delete selected files\n" + "permanently from hard drive?",
				"Delete Files", javax.swing.JOptionPane.YES_NO_OPTION,
				javax.swing.JOptionPane.QUESTION_MESSAGE);
		if (option == javax.swing.JOptionPane.OK_OPTION) {
			for (int i = indices.length - 1; i >= 0; --i) {
				java.io.File file = new java.io.File(
						(String) listModel.getElementAt(indices[i]));
				if (file.exists())
					file.delete();
				listModel.removeElementAt(indices[i]);
			}
		}
	}

	/**
	 * Gets a single selected element from the list.
	 * 
	 * @return The selected String or <code>null</code> if nothing is selected.
	 */
	public String getSelectedElement() {
		return ((String) jList.getSelectedValue());
	}

	/**
	 * Gets an array of selected elements from the list.
	 * 
	 * @return An array of selected elements or null if nothing is selected.
	 */
	public String[] getSelectedElements() {
		Object[] ob = jList.getSelectedValues();
		if (ob.length == 0)
			return (null);
		String[] pathnames = new String[ob.length];
		for (int i = 0; i < ob.length; ++i) {
			pathnames[i] = (String) ob[i];
		}
		return (pathnames);
	}

	/**
	 * Gets a specific element from the list.
	 * 
	 * @param index
	 *            The specified index.
	 * @return The string at the position specified by <code>index</code>.
	 */
	public String getElementAt(int index) {
		return ((String) listModel.getElementAt(index));
	}

	/**
	 * Gets all elements from the list.
	 * 
	 * @return A string array with alle elements of the list in correct order.
	 */
	public String[] getAllElements() {
		Object[] ob = listModel.toArray();
		if (ob.length == 0)
			return (null);
		String[] pathnames = new String[ob.length];
		for (int i = 0; i < ob.length; ++i) {
			pathnames[i] = (String) ob[i];
		}
		return (pathnames);
	}

	/**
	 * Selects a set of cells.
	 * 
	 * @param indices
	 *            The indices of the cells to select.
	 */
	public void selectElements(int[] indices) {
		jList.setSelectedIndices(indices);
	}

	/**
	 * Selects a set of cells.
	 * 
	 * @param start
	 *            The index the first cell to select.
	 * @param end
	 *            The index of the last cell to select.
	 */
	public void selectElements(int start, int end) {
		jList.setSelectionInterval(start, end);
	}

	/**
	 * Get the number of elements.
	 * 
	 * @return The number of elements in the list.
	 */
	public int getNumberOfElements() {
		return (listModel.indexOf(listModel.lastElement()) + 1);
	}

	/**
	 * Clears the selection.
	 */
	public void clearSelection() {
		jList.clearSelection();
	}

	/**
	 * Removes a specific element from the list.
	 * 
	 * @param index
	 *            The index of the element to remove.
	 */
	public void removeElement(int index) {
		listModel.remove(index);
	}

	/**
	 * Calls jpiv2.JPiv.display(String pathname) to display the selected file.
	 */
	private void display(String pathname) {
		jpiv.display(pathname);
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JList jList;
	private javax.swing.JMenuItem jMenuItemDelete;
	private javax.swing.JMenuItem jMenuItemDisplay;
	private javax.swing.JMenuItem jMenuItemRemove;
	private javax.swing.JMenuItem jMenuItemRemoveAll;
	private javax.swing.JPopupMenu jPopupMenu;
	private javax.swing.JScrollPane jScrollPane;
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JSeparator jSeparator2;
	// End of variables declaration//GEN-END:variables

	private jpiv2.JPiv jpiv;
	private javax.swing.DefaultListModel listModel;
}
