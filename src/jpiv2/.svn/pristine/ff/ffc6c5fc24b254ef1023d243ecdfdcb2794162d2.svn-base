/*
 * ScriptDlg.java
 *
 * Copyright 2008 Peter Vennemann
 * 
 * This file is part of JPIV.
 *
 * JPIV is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JPIV is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JPIV.  If not, see <http://www.gnu.org/licenses/>. 
 */

package jpiv2;

/**
 * A customizable dialog for user input. This dialog is intended for use in
 * scripts. It displays a dialog with some information about the script and its
 * usage, and it gives the user the possibility to insert some variables. Use
 * the addVariable(String name, String value, String description) method to add
 * a new variable. Use the display() method to show the dialog. This method will
 * return when the user presses either 'quit' or 'execute'. There are several
 * getAs...(String name) methods to retrieve the values of the variables.
 * 
 */
public class ScriptDlg extends javax.swing.JDialog {

	private String title = "";
	private String author = "";
	private String date = "";
	private String os = "";
	private String dependencies = "";
	private String comment = "";
	private java.util.LinkedHashMap<String, String> lhmDescriptions = new java.util.LinkedHashMap<String, String>();
	private java.util.LinkedHashMap<String, String> lhmValues = new java.util.LinkedHashMap<String, String>();
	private String[] colHeads = { "name", "value" };

	/** returned by display() if user selected 'execute' */
	public final int EXECUTE_OPTION = 1;
	/** returned by display() if user selected 'quit' */
	public final int QUIT_OPTION = 0;

	private int userOption = QUIT_OPTION;

	/**
	 * Constructor. Call the constructor to create a new dialog.
	 * 
	 * @param parent
	 *            The parent frame (within a script this is usually 'jpiv';
	 * @see jpiv2.CmdInterpreter
	 * @param title
	 *            The name of your script.
	 * @param author
	 *            Your name or e-mail address.
	 */
	public ScriptDlg(java.awt.Frame parent, String title, String author) {
		super(parent, true);
		initComponents();
		this.title = title;
		this.author = author;
		setInfo();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		jScrollPaneInfo = new javax.swing.JScrollPane();
		jTextPaneInfo = new javax.swing.JTextPane();
		jScrollPaneParam = new javax.swing.JScrollPane();
		jTableParam = new javax.swing.JTable();
		jPanel1 = new javax.swing.JPanel();
		jButtonExecute = new javax.swing.JButton();
		jButtonQuit = new javax.swing.JButton();

		setTitle("Edit Parameters");
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				closeDialog(evt);
			}
		});

		jScrollPaneInfo.setPreferredSize(new java.awt.Dimension(400, 200));
		jTextPaneInfo.setEditable(false);
		jScrollPaneInfo.setViewportView(jTextPaneInfo);

		getContentPane().add(jScrollPaneInfo, java.awt.BorderLayout.NORTH);

		jScrollPaneParam.setPreferredSize(new java.awt.Dimension(400, 200));
		jScrollPaneParam.setViewportView(jTableParam);

		getContentPane().add(jScrollPaneParam, java.awt.BorderLayout.CENTER);

		jPanel1.setPreferredSize(new java.awt.Dimension(400, 35));
		jButtonExecute.setText("execute");
		jButtonExecute.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonExecuteActionPerformed(evt);
			}
		});

		jPanel1.add(jButtonExecute);

		jButtonQuit.setText("quit");
		jButtonQuit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonQuitActionPerformed(evt);
			}
		});

		jPanel1.add(jButtonQuit);

		getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

		pack();
	}// GEN-END:initComponents

	private void jButtonExecuteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonExecuteActionPerformed
		if (jTableParam.isEditing()) {
			jTableParam.getCellEditor().stopCellEditing();
		}
		jTableParam.editingStopped(new javax.swing.event.ChangeEvent(
				jTableParam));
		updateVariables();
		userOption = EXECUTE_OPTION;
		this.setVisible(false);
		dispose();
	}// GEN-LAST:event_jButtonExecuteActionPerformed

	private void jButtonQuitActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonQuitActionPerformed
		userOption = QUIT_OPTION;
		this.setVisible(false);
		dispose();
	}// GEN-LAST:event_jButtonQuitActionPerformed

	private void closeDialog(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_closeDialog
		userOption = QUIT_OPTION;
		this.setVisible(false);
		dispose();
	}// GEN-LAST:event_closeDialog

	private void updateVariables() {
		lhmValues.clear();
		// read variables from the table model
		for (int i = 0; i < jTableParam.getRowCount(); ++i) {
			lhmValues.put((String) jTableParam.getModel().getValueAt(i, 0),
					(String) jTableParam.getModel().getValueAt(i, 1));
		}
		// print variables
		System.out.println(title);
		System.out.println("variables: ");
		java.util.Iterator it = lhmValues.entrySet().iterator();
		while (it.hasNext()) {
			java.util.Map.Entry entry = (java.util.Map.Entry) it.next();
			System.out.println(entry.getKey() + " = " + entry.getValue());
		}
	}

	private void setInfo() {
		String info = "<html><body>" + "<h1>" + title + "</h1><br>"
				+ "<b>author:</b> " + author + "<br>";
		if (date != "")
			info += "<b>date:</b> " + date + "<br>";
		if (os != "")
			info += "<b>os:</b> " + os + "<br>";
		if (dependencies != "")
			info += "<b>dependencies:</b> " + dependencies + "<br>";
		if (comment != "")
			info += "<b>comment:</b> " + comment + "<br>";
		info += "<br>";
		java.util.Iterator it = lhmDescriptions.entrySet().iterator();
		while (it.hasNext()) {
			java.util.Map.Entry entry = (java.util.Map.Entry) it.next();
			info += "<i>" + entry.getKey() + ":</i> " + entry.getValue()
					+ "<br>";
		}
		info += "</body></html>";
		jTextPaneInfo.setContentType("text/html");
		jTextPaneInfo.setText(info);
		jTextPaneInfo.setCaretPosition(0);
	}

	/**
	 * Displays the dialog on screen. Call this method to display your dialog.
	 * This method will return when the user presses either 'quit' or 'execute'.
	 * One of the constants QUIT_OPTION or EXECUTE_OPTION is returned
	 * respectively.
	 * 
	 * @return One of the integer constants QUIT_OPTION or EXECUTE_OPTION.
	 */
	public int display() {
		int dlgW = this.getWidth();
		int dlgH = this.getHeight();
		int parW = this.getParent().getWidth();
		int parH = this.getParent().getHeight();
		this.setLocation((parW - dlgW) / 2, (parH - dlgH) / 2);
		// setVisible(boolean b) returns when set to false.
		this.setVisible(true);
		return (userOption);
	}

	/**
	 * Add the date when the script was changed the last time.
	 * 
	 * @param date
	 *            The date.
	 */
	public void setDate(String date) {
		this.date = date;
		setInfo();
	}

	/**
	 * Does the script require a particular operating system?
	 * 
	 * @param os
	 *            The operating system (e.g. "linux", "win32").
	 */
	public void setOs(String os) {
		this.os = os;
		setInfo();
	}

	/**
	 * Does the script require some external resources or programs?
	 * 
	 * @param dependencies
	 *            The resource (e.g. matlab, PivWare).
	 */
	public void setDependencies(String dependencies) {
		this.dependencies = dependencies;
		setInfo();
	}

	/**
	 * Add additional information about your script.
	 * 
	 * @param comment
	 *            The comment.
	 */
	public void setComment(String comment) {
		this.comment = comment;
		setInfo();
	}

	/**
	 * Add a variable that might be modified by the user.
	 * 
	 * @param name
	 *            The variable name. Use this name to refere to the variable.
	 * @param value
	 *            A default value. This value might be changed by the user.
	 * @param description
	 *            A description of the variable.
	 */
	public void addVariable(String name, String value, String description) {
		// add variable into hashtables
		lhmValues.put(name, value);
		lhmDescriptions.put(name, description);
		// copy hashtable data into an array
		String[][] tableContent = new String[lhmValues.size()][2];
		java.util.Iterator it = lhmValues.entrySet().iterator();
		int i = 0;
		while (it.hasNext()) {
			java.util.Map.Entry entry = (java.util.Map.Entry) it.next();
			tableContent[i][0] = (String) entry.getKey();
			tableContent[i][1] = (String) entry.getValue();
			++i;
		}
		// use array to produce a table model
		javax.swing.table.TableModel tableModel = new javax.swing.table.DefaultTableModel(
				tableContent, colHeads) {
			boolean[] canEdit = new boolean[] { false, true };

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		};
		jTableParam.setModel(tableModel);
		setInfo();
	}

	/**
	 * Return the value of the variable 'name' as a String.
	 * 
	 * @param name
	 *            The name of the variable (key).
	 * @return The value of the variable.
	 */
	public String getAsString(String name) {
		return ((String) lhmValues.get(name));
	}

	/**
	 * Return the value of the variable 'name' as boolean. The string "true" is
	 * interpreted as boolean true (ignoring case), everything else is
	 * interpreted as boolean false.
	 * 
	 * @return True or false.
	 * @param name
	 *            A string "true" (returns true) or something else (returns
	 *            false)
	 */
	public boolean getAsBoolean(String name) {
		return (Boolean.parseBoolean(getAsString(name).trim()));
	}

	/**
	 * Return the value of the variable 'name' as an Integer.
	 * 
	 * @param name
	 *            The name of the variable (key).
	 * @return The value of the variable.
	 */
	public int getAsInt(String name) {
		return (Integer.parseInt(getAsString(name).trim()));
	}

	/**
	 * Return the value of the variable 'name' as a Double.
	 * 
	 * @param name
	 *            The name of the variable (key).
	 * @return The value of the variable.
	 */
	public double getAsDouble(String name) {
		return (Double.parseDouble(getAsString(name).trim()));
	}

	/**
	 * Get the index of the currently selected row
	 * 
	 * @return The index of the selected row
	 */
	public int getSelectedRow() {
		return (jTableParam.getSelectedRow());
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButtonExecute;
	private javax.swing.JButton jButtonQuit;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPaneInfo;
	private javax.swing.JScrollPane jScrollPaneParam;
	private javax.swing.JTable jTableParam;
	private javax.swing.JTextPane jTextPaneInfo;
	// End of variables declaration//GEN-END:variables

}
