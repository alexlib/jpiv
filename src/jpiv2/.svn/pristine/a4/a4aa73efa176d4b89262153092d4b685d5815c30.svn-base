/*
 * DisplayFrame.java
 *
 * Copyright 2008 Peter Vennemann
 * 
 * This file is part of JPIV.
 *
 * JPIV is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JPIV is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JPIV.  If not, see <http://www.gnu.org/licenses/>. 
 */

package jpiv2;

import java.awt.*;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.awt.image.renderable.ParameterBlock;
import javax.media.jai.JAI;
import javax.media.jai.PlanarImage;
import javax.media.jai.RenderedOp;

//import org.freehep.graphics2d.VectorGraphics;

/**
 * Displays pixel images on the screen.
 * 
 * @author peterv
 */
public class DisplayImgFrame extends javax.swing.JFrame {

	/**
	 * Constructor.
	 * 
	 * @param jpiv
	 *            The parent component.
	 * @param filename
	 *            The complete pathname of the image.
	 */
	public DisplayImgFrame(jpiv2.JPiv jpiv, String filename) {
		this.jpiv = jpiv;
		this.pivImg = new jpiv2.PivImg(jpiv, filename);
		initComponents();
		initDisplayPanel();
		this.setTitle(pivImg.getFilename());
		this.pack();
		this.setVisible(true);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPopupMenu = new javax.swing.JPopupMenu();
		jMenuItemCorrMap = new javax.swing.JMenuItem();
		jPanelButtons = new javax.swing.JPanel();
		jLabelFrameA = new javax.swing.JLabel();
		jSliderSwitchFrame = new javax.swing.JSlider();
		jLabelFrameB = new javax.swing.JLabel();
		jButton0256 = new javax.swing.JButton();
		jButton0512 = new javax.swing.JButton();
		jButton1024 = new javax.swing.JButton();
		jButton2048 = new javax.swing.JButton();
		jButton4096 = new javax.swing.JButton();
		jButtonMinMax = new javax.swing.JButton();
		jLabelStatus = new javax.swing.JLabel();
		jScrollPane = new javax.swing.JScrollPane();

		jMenuItemCorrMap.setText("show correlation map");
		jMenuItemCorrMap.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItemCorrMapActionPerformed(evt);
			}
		});
		jPopupMenu.add(jMenuItemCorrMap);

		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				exitForm(evt);
			}
		});

		jPanelButtons.setPreferredSize(new java.awt.Dimension(10, 70));
		jPanelButtons.setLayout(new java.awt.FlowLayout(
				java.awt.FlowLayout.LEFT));

		jLabelFrameA.setText("frame 0");
		jPanelButtons.add(jLabelFrameA);

		jSliderSwitchFrame.setMajorTickSpacing(1);
		jSliderSwitchFrame.setMaximum(1);
		jSliderSwitchFrame.setMinorTickSpacing(1);
		jSliderSwitchFrame.setSnapToTicks(true);
		jSliderSwitchFrame.setValue(0);
		jSliderSwitchFrame.setPreferredSize(new java.awt.Dimension(50, 16));
		jSliderSwitchFrame
				.addChangeListener(new javax.swing.event.ChangeListener() {
					public void stateChanged(javax.swing.event.ChangeEvent evt) {
						jSliderSwitchFrameStateChanged(evt);
					}
				});
		jPanelButtons.add(jSliderSwitchFrame);

		jLabelFrameB.setText("frame 1");
		jPanelButtons.add(jLabelFrameB);

		jButton0256.setText("256");
		jButton0256.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonAmpActionPerformed(evt);
			}
		});
		jPanelButtons.add(jButton0256);

		jButton0512.setText("512");
		jButton0512.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonAmpActionPerformed(evt);
			}
		});
		jPanelButtons.add(jButton0512);

		jButton1024.setText("1024");
		jButton1024.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonAmpActionPerformed(evt);
			}
		});
		jPanelButtons.add(jButton1024);

		jButton2048.setText("2048");
		jButton2048.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonAmpActionPerformed(evt);
			}
		});
		jPanelButtons.add(jButton2048);

		jButton4096.setText("4096");
		jButton4096.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonAmpActionPerformed(evt);
			}
		});
		jPanelButtons.add(jButton4096);

		jButtonMinMax.setText("min-max");
		jButtonMinMax.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonAmpActionPerformed(evt);
			}
		});
		jPanelButtons.add(jButtonMinMax);

		getContentPane().add(jPanelButtons, java.awt.BorderLayout.NORTH);

		jLabelStatus.setText("--");
		getContentPane().add(jLabelStatus, java.awt.BorderLayout.SOUTH);

		jScrollPane
				.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
		jScrollPane
				.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		getContentPane().add(jScrollPane, java.awt.BorderLayout.CENTER);
	}// </editor-fold>//GEN-END:initComponents

	private void jMenuItemCorrMapActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemCorrMapActionPerformed
		// getting the correlation map
		float zoom = jpiv.getSettings().imgZoom;
		int x = (int) Math.rint(mouseOnImgX / zoom);
		int y = (int) Math.rint(mouseOnImgY / zoom);
		int dx = jpiv.getSettings().pivWindow[0][0];
		int dy = jpiv.getSettings().pivWindow[1][0];
		PlanarImage corrMap = jpiv2.PivUtil.correlate(
				pivImg.getSubImage(x, y, dx, dy, 0),
				pivImg.getSubImage(x, y, dx, dy, 1));
		// finding extremas
		int[] maxPos = PivUtil.getPeak(corrMap, null);
		double[] maxPosGauss = PivUtil.gaussianPeakFit(corrMap, maxPos[0],
				maxPos[1]);
		System.out.println("position of correlation peak:" + " x = "
				+ (maxPos[0] - dx / 2) + " (" + (maxPosGauss[0] - dx / 2)
				+ ") " + " y = " + (maxPos[1] - dy / 2) + " ("
				+ (maxPosGauss[1] - dy / 2) + ")");
		// normalization
		ParameterBlock pb = new ParameterBlock();
		pb.addSource(corrMap);
		RenderedOp op = JAI.create("extrema", pb);
		double[][] extrema = (double[][]) op.getProperty("extrema");
		double[][] scales = new double[2][1];
		scales[0][0] = 1 / (extrema[1][0] - extrema[0][0]);
		scales[1][0] = extrema[0][0] / (extrema[0][0] - extrema[1][0]);
		pb = new ParameterBlock();
		pb.addSource(corrMap);
		pb.add(scales[0]);
		pb.add(scales[1]);
		PlanarImage normCorrMap = JAI.create("rescale", pb);
		// scale correlation map
		pb = new ParameterBlock();
		pb.addSource(normCorrMap);
		pb.add(zoom);
		pb.add(zoom);
		pb.add(0.0F);
		pb.add(0.0F);
		pb.add(new javax.media.jai.InterpolationNearest());
		PlanarImage zoomCorrMap = JAI.create("scale", pb, null);
		// create color image
		BufferedImage bi = new BufferedImage(zoomCorrMap.getWidth(),
				zoomCorrMap.getHeight(), BufferedImage.TYPE_3BYTE_BGR);
		// draw backgound
		// VectorGraphics vg = VectorGraphics.create( bi.getGraphics() );
		Graphics2D vg = bi.createGraphics();
		vg.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
				RenderingHints.VALUE_ANTIALIAS_ON);
		vg.drawRenderedImage(zoomCorrMap, new AffineTransform());
		// draw vector
		drawVector(vg, zoom, bi.getWidth(), bi.getHeight(),
				(maxPosGauss[0] - dx / 2), (maxPosGauss[1] - dx / 2));
		// display the correlation map
		jpiv2.FloatingFrame ff = new jpiv2.FloatingFrame((java.awt.Frame) this,
				bi);
		Point p = displayPanel.getLocationOnScreen();
		p.translate(mouseOnImgX, mouseOnImgY);
		ff.setLocation(p);
		ff.setVisible(true);
	}// GEN-LAST:event_jMenuItemCorrMapActionPerformed

	private void jSliderSwitchFrameStateChanged(
			javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_jSliderSwitchFrameStateChanged
		if (jpiv.getSettings().imgTwoFrames) {
			displayPanel.showFrame(jSliderSwitchFrame.getValue());
		}
	}// GEN-LAST:event_jSliderSwitchFrameStateChanged

	private void jButtonAmpActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonAmpActionPerformed
		if (evt.getSource().equals(jButton0256)) {
			range = jpiv2.PivImg.R00256;
		}
		if (evt.getSource().equals(jButton0512)) {
			range = jpiv2.PivImg.R00512;
		}
		if (evt.getSource().equals(jButton1024)) {
			range = jpiv2.PivImg.R01024;
		}
		if (evt.getSource().equals(jButton2048)) {
			range = jpiv2.PivImg.R02048;
		}
		if (evt.getSource().equals(jButton4096)) {
			range = jpiv2.PivImg.R04096;
		}
		if (evt.getSource().equals(jButtonMinMax)) {
			range = jpiv2.PivImg.RMIN_MAX;
		}
		updateDisplay();
	}// GEN-LAST:event_jButtonAmpActionPerformed

	private void displayPanelMousePopupTrigger(java.awt.event.MouseEvent evt) {
		if (evt.isPopupTrigger()) {
			mouseOnImgX = evt.getX();
			mouseOnImgY = evt.getY();
			jPopupMenu.show(evt.getComponent(), mouseOnImgX, mouseOnImgY);
		}
	}

	/**
	 * Updates the frame using the current settings.
	 */
	public void updateDisplay() {
		float zoom = jpiv.getSettings().imgZoom;
		displayPanel.setImage(pivImg.getAsPlanarImageByte(range, zoom));
		if (jpiv.getSettings().imgTwoFrames) {
			displayPanel.showFrame(jSliderSwitchFrame.getValue());
		} else {
			displayPanel.showFrame(2);
		}
	}

	/**
	 * Writing a String into the status line.
	 * 
	 * @param txt
	 *            The text.
	 */
	public void setStatusText(String txt) {
		jLabelStatus.setText(txt);
	}

	private void displayPanelMouseMoved(java.awt.event.MouseEvent evt) {
		float zoom = jpiv.getSettings().imgZoom;
		int x = (int) Math.rint(evt.getX() / zoom);
		int y = (int) Math.rint(evt.getY() / zoom);
		float intensity = pivImg.getIntensityAt(x, y);
		setStatusText(" x: " + x + " y: " + y + " intensity: " + intensity);
	}

	private void initDisplayPanel() {
		float zoom = jpiv.getSettings().imgZoom;
		int frame = 2;
		if (jpiv.getSettings().imgTwoFrames) {
			frame = 0;
		}
		displayPanel = new jpiv2.DisplayPanel(jpiv,
				pivImg.getAsPlanarImageByte(range, zoom), frame);
		displayPanel
				.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
					public void mouseMoved(java.awt.event.MouseEvent evt) {
						displayPanelMouseMoved(evt);
					}
				});
		displayPanel.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseEntered(java.awt.event.MouseEvent evt) {
				displayPanel.setCursor(Cursor
						.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
			}

			public void mouseClicked(java.awt.event.MouseEvent evt) {
				displayPanelMousePopupTrigger(evt);
			}

			public void mousePressed(java.awt.event.MouseEvent evt) {
				displayPanelMousePopupTrigger(evt);
			}

			public void mouseReleased(java.awt.event.MouseEvent evt) {
				displayPanelMousePopupTrigger(evt);
			}
		});
		jScrollPane.setViewportView(displayPanel);
	}

	/** Exit the Application */
	private void exitForm(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_exitForm
		this.dispose();
	}// GEN-LAST:event_exitForm

	private void drawVector(
	// VectorGraphics vg,
			Graphics2D vg, float zoom, int dx, int dy, double vx, double vy) {
		Settings settings = jpiv.getSettings();
		double l, // vector length
		b, // base points of arrow head (-b, +b)
		hl = settings.vectorHeadLength, // head length as a fraction of l
		phi, // pointing direction
		gamma = settings.vectorAngle * Math.PI / 180; // arrow head angle
		boolean multiColor = settings.vectorMultiColor; // color corresponds to
														// the vector length
		float colorMin = settings.vectorMultiColorMin; // this length
														// corresponds to blue
		float colorMax = settings.vectorMultiColorMax; // this length
														// corresponds to red
		int[] px = new int[3]; // x coordinates of the arrowhead points
		int[] py = new int[3]; // y coordinates of the arrowhead points
		// draw vector
		double x0 = (double) dx / 2.0;
		double y0 = (double) dy / 2.0;
		phi = Math.atan2(vy, vx);
		l = Math.sqrt((vx * vx + vy * vy)) * zoom;
		if (multiColor) {
			vg.setColor(getMultiColorCode(colorMin, colorMax,
					(float) (l / zoom)));
		} else {
			vg.setColor(settings.vectorColor);
		}
		b = Math.tan(gamma / 2) * l * hl;
		px[0] = (int) (x0 + (hl * l));
		px[1] = (int) (x0 + (hl * l));
		px[2] = (int) (x0 + l);
		py[0] = (int) ((y0 + b));
		py[1] = (int) ((y0 - b));
		py[2] = (int) y0;
		vg.rotate(phi, x0, y0);
		vg.drawLine((int) x0, (int) y0, (int) (x0 + l), (int) y0);
		vg.fillPolygon(px, py, 3);
		vg.rotate(-phi, x0, y0);
	}

	/**
	 * Gets a linearily interpolated color for <code>val</code> between
	 * <code>min</code> = blue and <code>max</code> = red with green and yellow
	 * inbetween.
	 */
	private Color getMultiColorCode(float min, float max, float val) {
		if (val < min)
			val = min;
		if (val > max)
			val = max;
		float h = 2f / 3f * (1f - ((val - min) / (max - min)));
		float s = 1f;
		float b = 1f;
		Color c = Color.getHSBColor(h, s, b);
		return (new java.awt.Color(c.getRed() / 255f, c.getGreen() / 255f,
				c.getBlue() / 255f,
				jpiv.getSettings().vectorMultiColorTransparancy));
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButton0256;
	private javax.swing.JButton jButton0512;
	private javax.swing.JButton jButton1024;
	private javax.swing.JButton jButton2048;
	private javax.swing.JButton jButton4096;
	private javax.swing.JButton jButtonMinMax;
	private javax.swing.JLabel jLabelFrameA;
	private javax.swing.JLabel jLabelFrameB;
	private javax.swing.JLabel jLabelStatus;
	private javax.swing.JMenuItem jMenuItemCorrMap;
	private javax.swing.JPanel jPanelButtons;
	private javax.swing.JPopupMenu jPopupMenu;
	private javax.swing.JScrollPane jScrollPane;
	private javax.swing.JSlider jSliderSwitchFrame;
	// End of variables declaration//GEN-END:variables

	private jpiv2.JPiv jpiv;
	private jpiv2.DisplayPanel displayPanel;
	private jpiv2.PivImg pivImg;
	private int range = jpiv2.PivImg.RMIN_MAX;
	private int mouseOnImgX, mouseOnImgY;
}
