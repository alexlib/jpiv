/*
 * JPiv.java
 *
 * Copyright 2020 Peter Vennemann
 * 
 * This file is part of JPIV.
 *
 * JPIV is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JPIV is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JPIV.  If not, see <http://www.gnu.org/licenses/>. 
 */

package jpiv2;

import java.awt.Cursor;
import java.io.File;
import java.util.Arrays;
import java.util.Properties;

import javax.swing.ImageIcon;

/**
 * Main class of the jpiv2 package. This class takes care of the main program
 * frame and its menus and child frames. This method also provides some get...()
 * methods that provide handles to other initialized program components. This is
 * particularly handy for use in scripts.
 */
public class JPiv extends javax.swing.JFrame {
    
    	/**
	 * Entry point of the jpiv2 package
	 * 
	 * @param args
	 *            There are no command line arguments specified.
	 */
	public static void main(String args[]) {
		jpiv = new JPiv();
		jpiv.setVisible(true);
		if(args.length != 0){
			if (args[0].contentEquals("v")) {
				verbosity = true;
			}
			else {
				cmdInterpreter.execute(args, CmdInterpreter.TYPE_BSHFILE);
			}
		}
	}

	private static JPiv jpiv;
	private String message = "";
	public static Boolean verbosity = false;

	/** Constructor. */
	public JPiv() {
		showSplashScreen();
		getLocalSystemProperties();
		setLocalSystemProperties();
		System.out.println("initialize main frame");
		initComponents();
		System.out.println("initialize internal frames");
		initInternalFrames();
		arrangeFrameOnScreen();
		System.out.println("start command interpreter");
		startCmdInterpreter();
		System.out.println("load user settings");
		loadSettings();
		System.out.println("read script library");
		initScriptMenue();
		updateCmdFrame();
		System.out.println("redirect system output");
		redirectSystemOutput();
		printStartupMessage();
		splashScreen.quit();
		settingsFrame.showDocumentation();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar = new javax.swing.JToolBar();
        jButtonChooseFiles = new javax.swing.JButton();
        jButtonPivEval = new javax.swing.JButton();
        jButtonExec = new javax.swing.JButton();
        jButtonDoc = new javax.swing.JButton();
        jDesktopPane = new javax.swing.JDesktopPane();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFiles = new javax.swing.JMenu();
        jMenuItemChooseFiles = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItemSystemExit = new javax.swing.JMenuItem();
        jMenuIImage = new javax.swing.JMenu();
        jMenuItemSubstractBackground = new javax.swing.JMenuItem();
        jMenuItemJoin = new javax.swing.JMenuItem();
        JMenuItemSplit = new javax.swing.JMenuItem();
        jMenuPiv = new javax.swing.JMenu();
        jMenuItemRunPivEvaluation = new javax.swing.JMenuItem();
        jMenuItemRunTpc = new javax.swing.JMenuItem();
        jMenuVectorProcessing = new javax.swing.JMenu();
        jMenuItemNormMedianTest = new javax.swing.JMenuItem();
        jMenuItemInvalidateIsolatedVectors = new javax.swing.JMenuItem();
        jMenuItemReplaceByMedian = new javax.swing.JMenuItem();
        jMenuItemRemove = new javax.swing.JMenuItem();
        jMenuItemSubsRefDisp = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        jMenuItemMedianFilter = new javax.swing.JMenuItem();
        jMenuItemSmoothing = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        jMenuItemAverage = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        jMenuItemNormalVorticity = new javax.swing.JMenuItem();
        jMenuItemInPlaneShear = new javax.swing.JMenuItem();
        jMenuItemExtensionalStrain = new javax.swing.JMenuItem();
        jMenuItemReconstruct = new javax.swing.JMenuItem();
        jMenuJsc = new javax.swing.JMenu();
        jMenuItemOpenScript = new javax.swing.JMenuItem();
        jMenuItemSaveScript = new javax.swing.JMenuItem();
        jMenuItemExecuteFile = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jMenuFrames = new javax.swing.JMenu();
        jMenuItemArrangeInternalFrames = new javax.swing.JMenuItem();
        jMenuDokumentation = new javax.swing.JMenu();
        jMenuItemShowHtml = new javax.swing.JMenuItem();

        setTitle("JPIV 13.08");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/res/logo32.png")).getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jToolBar.setFloatable(false);
        jToolBar.setPreferredSize(new java.awt.Dimension(181, 36));

        jButtonChooseFiles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/choose_files.png"))); // NOI18N
        jButtonChooseFiles.setToolTipText("choose files");
        jButtonChooseFiles.setBorderPainted(false);
        jButtonChooseFiles.setMaximumSize(new java.awt.Dimension(32, 32));
        jButtonChooseFiles.setMinimumSize(new java.awt.Dimension(32, 32));
        jButtonChooseFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChooseFilesActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonChooseFiles);

        jButtonPivEval.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/piv.png"))); // NOI18N
        jButtonPivEval.setToolTipText("evaluate");
        jButtonPivEval.setBorderPainted(false);
        jButtonPivEval.setMaximumSize(new java.awt.Dimension(32, 32));
        jButtonPivEval.setMinimumSize(new java.awt.Dimension(32, 32));
        jButtonPivEval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPivEvalActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonPivEval);

        jButtonExec.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/execute_script.png"))); // NOI18N
        jButtonExec.setToolTipText("execute script file");
        jButtonExec.setBorderPainted(false);
        jButtonExec.setMaximumSize(new java.awt.Dimension(32, 32));
        jButtonExec.setMinimumSize(new java.awt.Dimension(32, 32));
        jButtonExec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonExec);

        jButtonDoc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/doc.png"))); // NOI18N
        jButtonDoc.setToolTipText("show html-documentation");
        jButtonDoc.setBorderPainted(false);
        jButtonDoc.setMaximumSize(new java.awt.Dimension(32, 32));
        jButtonDoc.setMinimumSize(new java.awt.Dimension(32, 32));
        jButtonDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDocActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonDoc);

        getContentPane().add(jToolBar, java.awt.BorderLayout.NORTH);
        getContentPane().add(jDesktopPane, java.awt.BorderLayout.CENTER);

        jMenuFiles.setText("File");

        jMenuItemChooseFiles.setText("choose files");
        jMenuItemChooseFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemChooseFilesActionPerformed(evt);
            }
        });
        jMenuFiles.add(jMenuItemChooseFiles);
        jMenuFiles.add(jSeparator1);

        jMenuItemSystemExit.setText("exit");
        jMenuItemSystemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSystemExitActionPerformed(evt);
            }
        });
        jMenuFiles.add(jMenuItemSystemExit);

        jMenuBar.add(jMenuFiles);

        jMenuIImage.setText("Image");

        jMenuItemSubstractBackground.setText("substract background");
        jMenuItemSubstractBackground.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSubstractBackgroundActionPerformed(evt);
            }
        });
        jMenuIImage.add(jMenuItemSubstractBackground);

        jMenuItemJoin.setText("single to double frame (join)");
        jMenuItemJoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemJoinActionPerformed(evt);
            }
        });
        jMenuIImage.add(jMenuItemJoin);

        JMenuItemSplit.setText("double to single frame (split)");
        JMenuItemSplit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JMenuItemSplitActionPerformed(evt);
            }
        });
        jMenuIImage.add(JMenuItemSplit);

        jMenuBar.add(jMenuIImage);

        jMenuPiv.setText("PIV");

        jMenuItemRunPivEvaluation.setText("run PIV image analysis");
        jMenuItemRunPivEvaluation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRunPivEvaluationActionPerformed(evt);
            }
        });
        jMenuPiv.add(jMenuItemRunPivEvaluation);

        jMenuItemRunTpc.setText("run single-pixel-sum-of-correlation");
        jMenuItemRunTpc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRunTpcActionPerformed(evt);
            }
        });
        jMenuPiv.add(jMenuItemRunTpc);

        jMenuBar.add(jMenuPiv);

        jMenuVectorProcessing.setText("Vector");

        jMenuItemNormMedianTest.setText("normalized median test");
        jMenuItemNormMedianTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNormMedianTestActionPerformed(evt);
            }
        });
        jMenuVectorProcessing.add(jMenuItemNormMedianTest);

        jMenuItemInvalidateIsolatedVectors.setText("Invalidate isolated vectors");
        jMenuItemInvalidateIsolatedVectors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemInvalidateIsolatedVectorsActionPerformed(evt);
            }
        });
        jMenuVectorProcessing.add(jMenuItemInvalidateIsolatedVectors);

        jMenuItemReplaceByMedian.setText("replace invalid vectors by median");
        jMenuItemReplaceByMedian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemReplaceByMedianActionPerformed(evt);
            }
        });
        jMenuVectorProcessing.add(jMenuItemReplaceByMedian);

        jMenuItemRemove.setText("remove invalid vectors (set to zero)");
        jMenuItemRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRemoveActionPerformed(evt);
            }
        });
        jMenuVectorProcessing.add(jMenuItemRemove);

        jMenuItemSubsRefDisp.setText("substract reference displacement");
        jMenuItemSubsRefDisp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSubsRefDispActionPerformed(evt);
            }
        });
        jMenuVectorProcessing.add(jMenuItemSubsRefDisp);
        jMenuVectorProcessing.add(jSeparator3);

        jMenuItemMedianFilter.setText("3x3 median filter");
        jMenuItemMedianFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMedianFilterActionPerformed(evt);
            }
        });
        jMenuVectorProcessing.add(jMenuItemMedianFilter);

        jMenuItemSmoothing.setText("3x3 smoothing");
        jMenuItemSmoothing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSmoothingActionPerformed(evt);
            }
        });
        jMenuVectorProcessing.add(jMenuItemSmoothing);
        jMenuVectorProcessing.add(jSeparator4);

        jMenuItemAverage.setText("average vector fields");
        jMenuItemAverage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAverageActionPerformed(evt);
            }
        });
        jMenuVectorProcessing.add(jMenuItemAverage);
        jMenuVectorProcessing.add(jSeparator5);

        jMenuItemNormalVorticity.setText("normal vorticity");
        jMenuItemNormalVorticity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNormalVorticityActionPerformed(evt);
            }
        });
        jMenuVectorProcessing.add(jMenuItemNormalVorticity);

        jMenuItemInPlaneShear.setText("in-plane shear");
        jMenuItemInPlaneShear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemInPlaneShearActionPerformed(evt);
            }
        });
        jMenuVectorProcessing.add(jMenuItemInPlaneShear);

        jMenuItemExtensionalStrain.setText("extensional strain");
        jMenuItemExtensionalStrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExtensionalStrainActionPerformed(evt);
            }
        });
        jMenuVectorProcessing.add(jMenuItemExtensionalStrain);

        jMenuItemReconstruct.setText("reconstruct third velocity component");
        jMenuItemReconstruct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemReconstructActionPerformed(evt);
            }
        });
        jMenuVectorProcessing.add(jMenuItemReconstruct);

        jMenuBar.add(jMenuVectorProcessing);

        jMenuJsc.setText("Script");

        jMenuItemOpenScript.setText("open script");
        jMenuItemOpenScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenScriptActionPerformed(evt);
            }
        });
        jMenuJsc.add(jMenuItemOpenScript);

        jMenuItemSaveScript.setText("save script");
        jMenuItemSaveScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveScriptActionPerformed(evt);
            }
        });
        jMenuJsc.add(jMenuItemSaveScript);

        jMenuItemExecuteFile.setText("execute script file");
        jMenuItemExecuteFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExecuteFileActionPerformed(evt);
            }
        });
        jMenuJsc.add(jMenuItemExecuteFile);
        jMenuJsc.add(jSeparator2);

        jMenuBar.add(jMenuJsc);

        jMenuFrames.setText("Frames");

        jMenuItemArrangeInternalFrames.setText("arrange internal frames");
        jMenuItemArrangeInternalFrames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemArrangeInternalFramesActionPerformed(evt);
            }
        });
        jMenuFrames.add(jMenuItemArrangeInternalFrames);

        jMenuBar.add(jMenuFrames);

        jMenuDokumentation.setText("Docs");

        jMenuItemShowHtml.setText("show html-documentation");
        jMenuItemShowHtml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemShowHtmlActionPerformed(evt);
            }
        });
        jMenuDokumentation.add(jMenuItemShowHtml);

        jMenuBar.add(jMenuDokumentation);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemSubstractBackgroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSubstractBackgroundActionPerformed
        new ImgProc(this, jpiv2.ImgProc.REMOVE_SLIDING_BACKGROUND).start();
    }//GEN-LAST:event_jMenuItemSubstractBackgroundActionPerformed

    private void jMenuItemJoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemJoinActionPerformed
        new ImgProc(this, jpiv2.ImgProc.JOIN).start();
    }//GEN-LAST:event_jMenuItemJoinActionPerformed

    private void JMenuItemSplitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JMenuItemSplitActionPerformed
        new ImgProc(this, jpiv2.ImgProc.SPLIT).start();
    }//GEN-LAST:event_JMenuItemSplitActionPerformed

	private void jMenuItemSubsRefDispActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemSubsRefDispActionPerformed
		new PivDataFilter(this, jpiv2.PivDataFilter.SUBSTRACT_REFERENCE_DISPL)
				.start();
	}// GEN-LAST:event_jMenuItemSubsRefDispActionPerformed

	private void jMenuItemAverageActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemAverageActionPerformed
		new PivDataReduce(this, jpiv2.PivDataReduce.AVERAGE).start();
	}// GEN-LAST:event_jMenuItemAverageActionPerformed

	private void jMenuItemInvalidateIsolatedVectorsActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemInvalidateIsolatedVectorsActionPerformed
		new PivDataFilter(this, jpiv2.PivDataFilter.REMOVE_ISOLATED_VECTORS)
				.start();
	}// GEN-LAST:event_jMenuItemInvalidateIsolatedVectorsActionPerformed

	private void jMenuItemRemoveActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemRemoveActionPerformed
		new PivDataFilter(this, jpiv2.PivDataFilter.REMOVE_INVALID).start();
	}// GEN-LAST:event_jMenuItemRemoveActionPerformed

	private void jMenuItemReconstructActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemReconstructActionPerformed
		reconstructThirdVelocityComponent();
	}// GEN-LAST:event_jMenuItemReconstructActionPerformed

	private void jMenuItemSmoothingActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemSmoothingActionPerformed
		new PivDataFilter(this, jpiv2.PivDataFilter.SMOOTH).start();
	}// GEN-LAST:event_jMenuItemSmoothingActionPerformed

	private void jMenuItemNormMedianTestActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemNormMedianTestActionPerformed
		new PivDataFilter(this, jpiv2.PivDataFilter.NORMALIZED_MEDIAN_TEST)
				.start();
	}// GEN-LAST:event_jMenuItemNormMedianTestActionPerformed

	private void jMenuItemRunTpcActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemRunTpcActionPerformed
		new jpiv2.SinglePixelCorr(this).start();
	}// GEN-LAST:event_jMenuItemRunTpcActionPerformed

	private void jMenuItemSaveScriptActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemSaveScriptActionPerformed
		saveBshFile();
	}// GEN-LAST:event_jMenuItemSaveScriptActionPerformed

	private void jMenuItemOpenScriptActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemOpenScriptActionPerformed
		openBshFile();
	}// GEN-LAST:event_jMenuItemOpenScriptActionPerformed

	private void jButtonDocActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonDocActionPerformed
		settingsFrame.showDocumentation();
	}// GEN-LAST:event_jButtonDocActionPerformed

	private void jButtonExecActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonExecActionPerformed
		executeBshFile();
	}// GEN-LAST:event_jButtonExecActionPerformed

	private void jButtonPivEvalActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonPivEvalActionPerformed
		new jpiv2.PivEvaluation(this).start();
	}// GEN-LAST:event_jButtonPivEvalActionPerformed

	private void jButtonChooseFilesActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonChooseFilesActionPerformed
		chooseFiles();
	}// GEN-LAST:event_jButtonChooseFilesActionPerformed

	private void jMenuItemJscActionPerformed(java.awt.event.ActionEvent evt) {
		String key = ((javax.swing.JMenuItem) evt.getSource()).getText();
		String[] val = { (String) jscHm.get(key) };
		cmdInterpreter.execute(val, CmdInterpreter.TYPE_BSHFILE);
	}

	private void jMenuItemExecuteFileActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemExecuteFileActionPerformed
		executeBshFile();
	}// GEN-LAST:event_jMenuItemExecuteFileActionPerformed

	private void jMenuItemMedianFilterActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemMedianFilterActionPerformed
		new PivDataFilter(this, jpiv2.PivDataFilter.MEDIAN_FILTER).start();
	}// GEN-LAST:event_jMenuItemMedianFilterActionPerformed

	private void jMenuItemReplaceByMedianActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemReplaceByMedianActionPerformed
		new PivDataFilter(this, jpiv2.PivDataFilter.REPLACE_INVALID_BY_MEDIAN)
				.start();
	}// GEN-LAST:event_jMenuItemReplaceByMedianActionPerformed

	private void jMenuItemShowHtmlActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemShowHtmlActionPerformed
		settingsFrame.showDocumentation();
	}// GEN-LAST:event_jMenuItemShowHtmlActionPerformed

	private void jMenuItemSystemExitActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemSystemExitActionPerformed
		exitApplication();
	}// GEN-LAST:event_jMenuItemSystemExitActionPerformed

	private void jMenuItemRunPivEvaluationActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemRunPivEvaluationActionPerformed
		new jpiv2.PivEvaluation(this).start();
		// new jpiv2.PivEvaluation(this).start();
	}// GEN-LAST:event_jMenuItemRunPivEvaluationActionPerformed

	private void jMenuItemChooseFilesActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemChooseFilesActionPerformed
		chooseFiles();
	}// GEN-LAST:event_jMenuItemChooseFilesActionPerformed

	private void jMenuItemArrangeInternalFramesActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemArrangeInternalFramesActionPerformed
		arrangeInternalFrames();
	}// GEN-LAST:event_jMenuItemArrangeInternalFramesActionPerformed

	private void formComponentResized(java.awt.event.ComponentEvent evt) {// GEN-FIRST:event_formComponentResized
		arrangeInternalFrames();
	}// GEN-LAST:event_formComponentResized

	/** Exit the Application */
	private void exitForm(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_exitForm
		exitApplication();
	}// GEN-LAST:event_exitForm

	private void jMenuItemNormalVorticityActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemNormalVorticityActionPerformed
		new PivDataFilter(this, jpiv2.PivDataFilter.NORMAL_VORTICITY).start();
	}// GEN-LAST:event_jMenuItemNormalVorticityActionPerformed

	private void jMenuItemInPlaneShearActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemInPlaneShearActionPerformed
		new PivDataFilter(this, jpiv2.PivDataFilter.IN_PLANE_SHEAR).start();
	}// GEN-LAST:event_jMenuItemInPlaneShearActionPerformed

	private void jMenuItemExtensionalStrainActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemExtensionalStrainActionPerformed
		new PivDataFilter(this, jpiv2.PivDataFilter.EXTENSIONAL_STRAIN).start();
	}// GEN-LAST:event_jMenuItemExtensionalStrainActionPerformed

	/** Saves the settings and exits the application. */
	private void exitApplication() {
		try {
			FileHandling.serialize(userDir + fileSeparator
					+ "jpiv_settings.ser", settings);
		} catch (java.io.IOException e) {
			System.err.println("jpiv2.JPiv.exitApplication:\n"
					+ "Unable to save user settings. Exit anyway.");
		}
		System.exit(0);
	}

	/**
	 * Returns the initialized instance of the JPIV application. Use this method
	 * as an entry point for accessing all other program components.
	 * 
	 * @return An initialized instance of the JPiv application.
	 */
	public static JPiv getInstance() {
		return (jpiv);
	}

	/**
	 * Get system dependent properties. Retrieves properties like the users
	 * working directory, file separator, class pathe etc.
	 */
	private void getLocalSystemProperties() {
		Properties sysProp = System.getProperties();
		javaClassPath = sysProp.getProperty("java.class.path");
		fileSeparator = sysProp.getProperty("file.separator");
		workDir = sysProp.getProperty("user.dir");
		userDir = sysProp.getProperty("user.home");
		userName = sysProp.getProperty("user.name");
	}
	
	/**
	 * Set system properties.
	 */
	private void setLocalSystemProperties() {
		Properties sysProp = System.getProperties();
		// Disable native JAI.
		sysProp.setProperty("com.sun.media.jai.disableMediaLib", "true");
	}

	private void initInternalFrames() {
		settingsFrame = new jpiv2.SettingsFrame(this);
		cmdFrame = new jpiv2.CmdFrame(this);
		listFrame = new jpiv2.ListFrame(this);
		jDesktopPane.add(settingsFrame);
		jDesktopPane.add(cmdFrame);
		jDesktopPane.add(listFrame);
		settingsFrame.show();
		cmdFrame.show();
		listFrame.show();
		flexFileChooser = new jpiv2.FlexFileChooser();
	}

	private void initScriptMenue() {
		// reading the directory
		File jscDir = new File(settings.jpivLibPath + fileSeparator + "jsc");
		File[] jscFiles = jscDir.listFiles();
		if (jscFiles != null) {
			Arrays.sort(jscFiles);
			// create menu items, command lines and event handling
			jMenuItemsJsc = new javax.swing.JMenuItem[jscFiles.length];
			jscHm = new java.util.HashMap<String, String>();
			String key = new String();
			String val = new String();
			for (int i = 0; i < jscFiles.length; ++i) {
				key = jpiv2.FileHandling.stripFilename(jscFiles[i]);
				val = jscFiles[i].toString();
				jMenuItemsJsc[i] = new javax.swing.JMenuItem();
				jMenuItemsJsc[i].setText(key);
				jMenuItemsJsc[i]
						.addActionListener(new java.awt.event.ActionListener() {
							public void actionPerformed(
									java.awt.event.ActionEvent evt) {
								jMenuItemJscActionPerformed(evt);
							}
						});
				jscHm.put(key, val);
				jMenuJsc.add(jMenuItemsJsc[i]);
			}
		} else {
			System.err.println("Could not find script library: "
					+ settings.jpivLibPath + fileSeparator + "jsc");
		}
	}

	private void arrangeFrameOnScreen() {
		this.setExtendedState(JPiv.MAXIMIZED_BOTH);
	}

	private void redirectSystemOutput() {
		jpiv2.SystemOutStream out = new jpiv2.SystemOutStream(System.out);
		out.assignCmdFrame(cmdFrame);
		System.setOut(out);
		System.setErr(out);
	}

	private void startCmdInterpreter() {
		cmdInterpreter = new jpiv2.CmdInterpreter(this, "jpiv");
	}

	private void loadSettings() {
		try {
			settings = (jpiv2.Settings) FileHandling.deSerialize(
                                userDir
				+ fileSeparator + "jpiv_settings.ser");
		} catch (java.io.FileNotFoundException fnfe) {
			message = "Can not find a user settings file. \n"
				+ "You are probably using JPIV the first time. \n"
				+ "A default settings file is created in your home directory.";
			System.err.println(message);
			settings = new jpiv2.Settings();
		} catch (java.lang.ClassNotFoundException cnfe) {
			message = "The user settings file in your home directory is outdated.\n"
				+ "This usually happen after updates of the settings class.\n"
				+ "A default settings file is created in your home directory.\n"
				+ "Your settings will be lost. Please excuse the inconvenience.";
			System.err.println(message);
			settings = new jpiv2.Settings();
		} catch (java.io.IOException ioe) {
			message = "The user settings file in your home directory is outdated.\n"
				+ "This usually happen after updates of the settings class.\n"
				+ "A default settings file is created in your home directory.\n"
				+ "Your settings will be lost. Please excuse the inconvenience.";
			System.err.println(message);
			settings = new jpiv2.Settings();
		}
		settingsFrame.setAllSettings(settings);
	}

	/**
	 * Shows the program icon during startup.
	 */
	public void showSplashScreen() {
		ImageIcon icon = new ImageIcon(getClass().getResource(
				"/res/logo256.png"));
		splashScreen = new jpiv2.SplashScreen(icon.getImage());
	}

	/** Prints a startup message to standard out. */
	public void printStartupMessage() {
		java.util.GregorianCalendar cal = new java.util.GregorianCalendar();
		System.out.println(
                                "JPIV 2020.04.26\n"
				+ "Copyright (C) 2020 Peter Vennemann\n"
				+ "JPIV is free software: you can redistribute it and/or modify "
				+ "it under the terms of the GNU General Public License.\n"
				+ "This program is distributed in the hope that it will be useful, "
				+ "but WITHOUT ANY WARRANTY.\n"
				+ "See http://www.gnu.org/licenses/ for details.\n"
				+ message + "\n" + "Session started by " + userName
				+ " on " + cal.get(java.util.Calendar.DATE) + "."
				+ (cal.get(java.util.Calendar.MONTH) + 1) + "."
				+ cal.get(java.util.Calendar.YEAR) + " at "
				+ cal.get(java.util.Calendar.HOUR_OF_DAY) + ":"
				+ cal.get(java.util.Calendar.MINUTE));
	}

	/**
	 * Creates a new jpiv2.ThirdComponentReconstruction object and calls its
	 * method start().
	 */
	public void reconstructThirdVelocityComponent() {
		new jpiv2.ThirdComponentReconstruction(this).start();
	}

	/**
	 * Brings up a file chooser dialog to determine a destination file.
	 * 
	 * @param type
	 *            The file extension ID.
	 * @return The selected pathname or null if the user cancelled the dialog.
	 */
	private String chooseDestPath(int type) {
		String pathname;
		flexFileChooser.setFiletype(type, false);
		int approve = flexFileChooser.showSaveDialog(this);
		if (approve == javax.swing.JFileChooser.APPROVE_OPTION) {
			pathname = flexFileChooser.getSelectedFile().toString();
			return (pathname);
		} else
			return (null);
	}

	/**
	 * Brings up a file chooser dialog to determine a source file.
	 * 
	 * @param type
	 *            The file extension ID.
	 * @return The selected pathname or null if the user cancelled the dialog.
	 */
	private String chooseSourcePath(int type) {
		String pathname;
		flexFileChooser.setFiletype(type, false);
		int approve = flexFileChooser.showOpenDialog(this);
		if (approve == javax.swing.JFileChooser.APPROVE_OPTION) {
			pathname = flexFileChooser.getSelectedFile().toString();
			return (pathname);
		} else
			return (null);
	}

	/** Orders and arranges all internal frames. */
	public void arrangeInternalFrames() {
		int width = jDesktopPane.getWidth();
		int height = jDesktopPane.getHeight();
		if (settingsFrame != null) {
			settingsFrame.setBounds(0, 0, width * 3 / 4, height * 2 / 3);
		}
		if (cmdFrame != null) {
			cmdFrame.setBounds(0, height * 2 / 3, width * 3 / 4, height / 3);
		}
		if (listFrame != null) {
			listFrame.setBounds(width * 3 / 4, 0, width / 4, height);
		}
	}

	/** Apply current settings to the command frame. */
	public void updateCmdFrame() {
		cmdFrame.setNumOfRows(settings.cmdNumOfLines);
		cmdFrame.setLineWrap(settings.cmdLineWrap);
	}

	/**
	 * Returns a handle to the java2.SettingsFrame.
	 * 
	 * @return The java2.SettingsFrame.
	 */
	public SettingsFrame getSettingsFrame() {
		return (settingsFrame);
	}

	/**
	 * Returns a handle to the java2.CmdFrame.
	 * 
	 * @return The java2.CmdFrame.
	 */
	public CmdFrame getCmdFrame() {
		return (cmdFrame);
	}

	/**
	 * Returns a handle to the java2.ListFrame.
	 * 
	 * @return The java2.ListFrame.
	 */
	public ListFrame getListFrame() {
		return (listFrame);
	}

	/**
	 * Returns a handle to the java2.CmdInerpreter.
	 * 
	 * @return The java2.CmdInterpreter.
	 */
	public CmdInterpreter getCmdInterpreter() {
		return (cmdInterpreter);
	}

	/**
	 * Returns a handle to the java2.Settings object.
	 * 
	 * @return The java2.Settings object.
	 */
	public Settings getSettings() {
		return (settings);
	}

	/**
	 * Returns a handle to the java2.FlexFileChooser object.
	 * 
	 * @return The java2.FlexFileChooser object.
	 */
	public FlexFileChooser getFlexFileChooser() {
		return (flexFileChooser);
	}

	/**
	 * Displays a jpiv2.FlexFileChooser. The selected pathnames are copied into
	 * the listFrame.
	 */
	public void chooseFiles() {
		flexFileChooser.setFiletype(FlexFileChooser.ALL, true);
		int approve = flexFileChooser.showOpenDialog(this);
		if (approve == javax.swing.JFileChooser.APPROVE_OPTION) {
			java.io.File[] files = flexFileChooser.getSelectedFiles();
			String[] pathnames = new String[files.length];
			for (int i = 0; i < files.length; ++i) {
				pathnames[i] = files[i].toString();
			}
			listFrame.appendElements(pathnames);
		}
	}

	/**
	 * Calls an appropriate method for displaying the selected file. This can be
	 * either a jpiv2.DisplayVecFrame method or a jpiv2.DisplayImgFrame method.
	 * The decision is made based on the file extension, not on the content of
	 * the file.
	 * 
	 * @param filename
	 *            The complete path of the file to be displayed.
	 */
	public void display(String filename) {
		String ext = jpiv2.FileHandling.getFileExtension(filename);
		try {
			if (ext.equals("jvc") || ext.equals("vec") || ext.equals("dat")
					|| ext.equals("nc")) {
				jpiv2.DisplayVecFrame displayVecFrame = new jpiv2.DisplayVecFrame(
						this, filename);
			} else {
				jpiv2.DisplayImgFrame displayImgFrame = new jpiv2.DisplayImgFrame(
						this, filename);
			}
		}
		catch(java.lang.NoClassDefFoundError e) {
			System.out.println("Using Java Advanced Imaging (JAI) in pure Java mode.\n" +
		                       "On 32 bit systems, consider installing the native accelerated version.");
		}	
		listFrame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
	}

	/**
	 * Executes a script file. A file chooser dialog is displayed and the
	 * selected file is given to the the current jpiv2.CmdInterpreter.
	 */
	public void executeBshFile() {
		flexFileChooser.setFiletype(FlexFileChooser.JSC, false);
		int approve = flexFileChooser.showOpenDialog(this);
		if (approve == javax.swing.JFileChooser.APPROVE_OPTION) {
			java.io.File file = flexFileChooser.getSelectedFile();
			String[] path = new String[1];
			path[0] = file.toString();
			cmdInterpreter.execute(path, CmdInterpreter.TYPE_BSHFILE);
		}
	}

	/**
	 * Open a text file. A file chooser dialog is displayed. The content of the
	 * choosen file is interpreted as UTF-8 text and displayed in the command
	 * frame.
	 */
	public void openBshFile() {
		flexFileChooser.setFiletype(FlexFileChooser.JSC, false);
		int approve = flexFileChooser.showOpenDialog(this);
		if (approve == javax.swing.JFileChooser.APPROVE_OPTION) {
			java.io.File file = flexFileChooser.getSelectedFile();
			String path = new String();
			path = file.toString();
			cmdFrame.append(jpiv2.FileHandling.readTextFile(path));
		}
	}

	/**
	 * Save text file. A file chooser dialog is displayed. The content of the
	 * cmd frame is written to the choosen file.
	 */
	public void saveBshFile() {
		flexFileChooser.setFiletype(FlexFileChooser.JSC, false);
		int approve = flexFileChooser.showSaveDialog(this);
		if (approve == javax.swing.JFileChooser.APPROVE_OPTION) {
			java.io.File file = flexFileChooser.getSelectedFile();
			String path = file.toString();
			int index = path.indexOf('.');
			if (index != -1)
				path = path.substring(0, index) + ".jsc";
			try {
				jpiv2.FileHandling.writeTextFile(path, cmdFrame.getText());
			} catch (java.io.IOException e) {
				System.err.println(e.toString());
			}
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem JMenuItemSplit;
    private javax.swing.JButton jButtonChooseFiles;
    private javax.swing.JButton jButtonDoc;
    private javax.swing.JButton jButtonExec;
    private javax.swing.JButton jButtonPivEval;
    private javax.swing.JDesktopPane jDesktopPane;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuDokumentation;
    private javax.swing.JMenu jMenuFiles;
    private javax.swing.JMenu jMenuFrames;
    private javax.swing.JMenu jMenuIImage;
    private javax.swing.JMenuItem jMenuItemArrangeInternalFrames;
    private javax.swing.JMenuItem jMenuItemAverage;
    private javax.swing.JMenuItem jMenuItemChooseFiles;
    private javax.swing.JMenuItem jMenuItemExecuteFile;
    private javax.swing.JMenuItem jMenuItemExtensionalStrain;
    private javax.swing.JMenuItem jMenuItemInPlaneShear;
    private javax.swing.JMenuItem jMenuItemInvalidateIsolatedVectors;
    private javax.swing.JMenuItem jMenuItemJoin;
    private javax.swing.JMenuItem jMenuItemMedianFilter;
    private javax.swing.JMenuItem jMenuItemNormMedianTest;
    private javax.swing.JMenuItem jMenuItemNormalVorticity;
    private javax.swing.JMenuItem jMenuItemOpenScript;
    private javax.swing.JMenuItem jMenuItemReconstruct;
    private javax.swing.JMenuItem jMenuItemRemove;
    private javax.swing.JMenuItem jMenuItemReplaceByMedian;
    private javax.swing.JMenuItem jMenuItemRunPivEvaluation;
    private javax.swing.JMenuItem jMenuItemRunTpc;
    private javax.swing.JMenuItem jMenuItemSaveScript;
    private javax.swing.JMenuItem jMenuItemShowHtml;
    private javax.swing.JMenuItem jMenuItemSmoothing;
    private javax.swing.JMenuItem jMenuItemSubsRefDisp;
    private javax.swing.JMenuItem jMenuItemSubstractBackground;
    private javax.swing.JMenuItem jMenuItemSystemExit;
    private javax.swing.JMenu jMenuJsc;
    private javax.swing.JMenu jMenuPiv;
    private javax.swing.JMenu jMenuVectorProcessing;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JToolBar jToolBar;
    // End of variables declaration//GEN-END:variables

	// program components
	private jpiv2.SplashScreen splashScreen;
	private jpiv2.Settings settings;
	private jpiv2.SettingsFrame settingsFrame;
	private jpiv2.CmdFrame cmdFrame;
	private jpiv2.ListFrame listFrame;
	private static jpiv2.CmdInterpreter cmdInterpreter;
	private jpiv2.FlexFileChooser flexFileChooser;
	// script library
	private javax.swing.JMenuItem[] jMenuItemsJsc;
	private java.util.HashMap<String, String> jscHm;
	// System dependent variables
	/** Location of the main class file. */
	public String javaClassPath;
	/** System dependent separation character between files. */
	public String fileSeparator;
	/** Current working directory. */
	public String workDir;
	/** Home directory of the current user. */
	public String userDir;
	/** Log in name of the current user. */
	public String userName;
}
